// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  fullName     String        @db.VarChar(255)
  birthday     DateTime
  email        String        @unique @db.VarChar(255)
  phone        String        @unique @db.VarChar(14)
  cpf          String        @unique @db.VarChar(14)
  userAuth     UserAuth?
  address      Address?
  userSessions UserSession[]
  enrollments  Enrollment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  UserAnswers  UserAnswers[]

  @@map("users")
}

model UserAuth {
  id        Int        @id @default(autoincrement())
  userEmail String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  role      RolesTypes @default(student)
  user      User       @relation(fields: [userEmail], references: [email])

  @@map("userAuths")
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("userSessions")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String   @db.VarChar(255)
  number     String   @db.VarChar(255)
  complement String?  @db.VarChar(255)
  district   String   @db.VarChar(255)
  postalCode String   @db.VarChar(9)
  cityId     Int
  userId     Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  city       City     @relation(fields: [cityId], references: [id])

  @@map("address")
}

model City {
  id      Int       @id
  name    String    @db.VarChar(255)
  stateId Int
  address Address[]
  state   State     @relation(fields: [stateId], references: [id])

  @@map("cities")
}

model State {
  id     Int     @id
  name   String  @db.VarChar(255)
  uf     StateUF
  cities City[]

  @@map("states")
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  classeId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  classe    Classe   @relation(fields: [classeId], references: [id])

  @@map("enrollments")
}

model Offering {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  startDate     DateTime
  endDate       DateTime
  testDate      DateTime
  testStartTime DateTime    @db.Time()
  testEndTime   DateTime    @db.Time()
  resultDate    DateTime
  enrollPrice   Int
  status        OfferStatus @default(open)
  classes       Classe[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("offerings")
}

model Classe {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  days        WeekDay[]
  startTime   DateTime     @db.Time()
  endTime     DateTime     @db.Time()
  startDate   DateTime
  endDate     DateTime
  vacancies   Int
  courseId    Int
  offeringId  Int?
  testId      Int?
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  course      Course?      @relation(fields: [courseId], references: [id])
  offering    Offering?    @relation(fields: [offeringId], references: [id])
  test        Test?        @relation(fields: [testId], references: [id])

  @@map("classes")
}

model Test {
  id        Int        @id @default(autoincrement())
  name      String
  classe    Classe[]
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("tests")
}

model Question {
  id            Int           @id @default(autoincrement())
  title         String        @db.Text
  optionA       String        @db.Text
  optionB       String        @db.Text
  optionC       String        @db.Text
  optionD       String        @db.Text
  correctAnswer Options
  testId        Int
  userAnswers   UserAnswers[]
  test          Test          @relation(fields: [testId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("questions")
}

model UserAnswers {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  userAnswer Options
  questions  Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Course {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.Text
  creditHours Int      @db.Integer
  imageUrl    String   @db.Text
  classes     Classe[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("courses")
}

enum Options {
  optionA
  optionB
  optionC
  optionD
}

enum RolesTypes {
  admin
  student
}

enum OfferStatus {
  open
  closed
  blocked
}

enum StateUF {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MS
  MT
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

enum WeekDay {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}
